//
// Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


partition_status = {
  'PS_INVALID' : 0,
  'PS_INACTIVE' : 1,
  'PS_ERROR' : 2,
  'PS_PRIMARY' : 3,
  'PS_SECONDARY' : 4,
  'PS_POTENTIAL_SECONDARY' : 5
};
read_semantic = {
  'ReadInvalid' : 0,
  'ReadLastUpdate' : 1,
  'ReadOutdated' : 2,
  'ReadSnapshot' : 3
};
learn_type = {
  'LT_INVALID' : 0,
  'LT_CACHE' : 1,
  'LT_APP' : 2,
  'LT_LOG' : 3
};
learner_status = {
  'LearningInvalid' : 0,
  'LearningWithoutPrepare' : 1,
  'LearningWithPrepareTransient' : 2,
  'LearningWithPrepare' : 3,
  'LearningSucceeded' : 4,
  'LearningFailed' : 5
};
config_type = {
  'CT_INVALID' : 0,
  'CT_ASSIGN_PRIMARY' : 1,
  'CT_UPGRADE_TO_PRIMARY' : 2,
  'CT_ADD_SECONDARY' : 3,
  'CT_UPGRADE_TO_SECONDARY' : 4,
  'CT_DOWNGRADE_TO_SECONDARY' : 5,
  'CT_DOWNGRADE_TO_INACTIVE' : 6,
  'CT_REMOVE' : 7,
  'CT_ADD_SECONDARY_FOR_LB' : 8
};
node_status = {
  'NS_INVALID' : 0,
  'NS_ALIVE' : 1,
  'NS_UNALIVE' : 2
};
balancer_type = {
  'BT_INVALID' : 0,
  'BT_MOVE_PRIMARY' : 1,
  'BT_COPY_PRIMARY' : 2,
  'BT_COPY_SECONDARY' : 3
};
mutation_header = function(args) {
  this.pid = null;
  this.ballot = null;
  this.decree = null;
  this.log_offset = null;
  this.last_committed_decree = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.ballot !== undefined && args.ballot !== null) {
      this.ballot = args.ballot;
    }
    if (args.decree !== undefined && args.decree !== null) {
      this.decree = args.decree;
    }
    if (args.log_offset !== undefined && args.log_offset !== null) {
      this.log_offset = args.log_offset;
    }
    if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
      this.last_committed_decree = args.last_committed_decree;
    }
  }
};
mutation_header.prototype = {};
mutation_header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ballot = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.log_offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

mutation_header.prototype.write = function(output) {
  output.writeStructBegin('mutation_header');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.ballot !== null && this.ballot !== undefined) {
    output.writeFieldBegin('ballot', Thrift.Type.I64, 2);
    output.writeI64(this.ballot);
    output.writeFieldEnd();
  }
  if (this.decree !== null && this.decree !== undefined) {
    output.writeFieldBegin('decree', Thrift.Type.I64, 3);
    output.writeI64(this.decree);
    output.writeFieldEnd();
  }
  if (this.log_offset !== null && this.log_offset !== undefined) {
    output.writeFieldBegin('log_offset', Thrift.Type.I64, 4);
    output.writeI64(this.log_offset);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
    output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 5);
    output.writeI64(this.last_committed_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

mutation_update = function(args) {
  this.code = null;
  this.data = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = new task_code(args.code);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new blob(args.data);
    }
  }
};
mutation_update.prototype = {};
mutation_update.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.code = new task_code();
        this.code.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new blob();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

mutation_update.prototype.write = function(output) {
  output.writeStructBegin('mutation_update');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRUCT, 1);
    this.code.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

mutation_data = function(args) {
  this.header = null;
  this.updates = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new mutation_header(args.header);
    }
    if (args.updates !== undefined && args.updates !== null) {
      this.updates = Thrift.copyList(args.updates, [mutation_update]);
    }
  }
};
mutation_data.prototype = {};
mutation_data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new mutation_header();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.updates = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new mutation_update();
          elem6.read(input);
          this.updates.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

mutation_data.prototype.write = function(output) {
  output.writeStructBegin('mutation_data');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.updates !== null && this.updates !== undefined) {
    output.writeFieldBegin('updates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.updates.length);
    for (var iter7 in this.updates)
    {
      if (this.updates.hasOwnProperty(iter7))
      {
        iter7 = this.updates[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

replica_configuration = function(args) {
  this.pid = null;
  this.ballot = null;
  this.primary = null;
  this.status = 0;
  this.learner_signature = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.ballot !== undefined && args.ballot !== null) {
      this.ballot = args.ballot;
    }
    if (args.primary !== undefined && args.primary !== null) {
      this.primary = new rpc_address(args.primary);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.learner_signature !== undefined && args.learner_signature !== null) {
      this.learner_signature = args.learner_signature;
    }
  }
};
replica_configuration.prototype = {};
replica_configuration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ballot = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.primary = new rpc_address();
        this.primary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.learner_signature = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

replica_configuration.prototype.write = function(output) {
  output.writeStructBegin('replica_configuration');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.ballot !== null && this.ballot !== undefined) {
    output.writeFieldBegin('ballot', Thrift.Type.I64, 2);
    output.writeI64(this.ballot);
    output.writeFieldEnd();
  }
  if (this.primary !== null && this.primary !== undefined) {
    output.writeFieldBegin('primary', Thrift.Type.STRUCT, 3);
    this.primary.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.learner_signature !== null && this.learner_signature !== undefined) {
    output.writeFieldBegin('learner_signature', Thrift.Type.I64, 5);
    output.writeI64(this.learner_signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

prepare_msg = function(args) {
  this.config = null;
  this.mu = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new replica_configuration(args.config);
    }
    if (args.mu !== undefined && args.mu !== null) {
      this.mu = new mutation_data(args.mu);
    }
  }
};
prepare_msg.prototype = {};
prepare_msg.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new replica_configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mu = new mutation_data();
        this.mu.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

prepare_msg.prototype.write = function(output) {
  output.writeStructBegin('prepare_msg');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.mu !== null && this.mu !== undefined) {
    output.writeFieldBegin('mu', Thrift.Type.STRUCT, 2);
    this.mu.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

read_request_header = function(args) {
  this.pid = null;
  this.code = null;
  this.semantic = 1;
  this.version_decree = -1;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = new task_code(args.code);
    }
    if (args.semantic !== undefined && args.semantic !== null) {
      this.semantic = args.semantic;
    }
    if (args.version_decree !== undefined && args.version_decree !== null) {
      this.version_decree = args.version_decree;
    }
  }
};
read_request_header.prototype = {};
read_request_header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.code = new task_code();
        this.code.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.semantic = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.version_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

read_request_header.prototype.write = function(output) {
  output.writeStructBegin('read_request_header');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRUCT, 2);
    this.code.write(output);
    output.writeFieldEnd();
  }
  if (this.semantic !== null && this.semantic !== undefined) {
    output.writeFieldBegin('semantic', Thrift.Type.I32, 3);
    output.writeI32(this.semantic);
    output.writeFieldEnd();
  }
  if (this.version_decree !== null && this.version_decree !== undefined) {
    output.writeFieldBegin('version_decree', Thrift.Type.I64, 4);
    output.writeI64(this.version_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

write_request_header = function(args) {
  this.pid = null;
  this.code = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = new task_code(args.code);
    }
  }
};
write_request_header.prototype = {};
write_request_header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.code = new task_code();
        this.code.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

write_request_header.prototype.write = function(output) {
  output.writeStructBegin('write_request_header');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRUCT, 2);
    this.code.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

rw_response_header = function(args) {
  this.err = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
  }
};
rw_response_header.prototype = {};
rw_response_header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

rw_response_header.prototype.write = function(output) {
  output.writeStructBegin('rw_response_header');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

prepare_ack = function(args) {
  this.pid = null;
  this.err = null;
  this.ballot = null;
  this.decree = null;
  this.last_committed_decree_in_app = null;
  this.last_committed_decree_in_prepare_list = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.ballot !== undefined && args.ballot !== null) {
      this.ballot = args.ballot;
    }
    if (args.decree !== undefined && args.decree !== null) {
      this.decree = args.decree;
    }
    if (args.last_committed_decree_in_app !== undefined && args.last_committed_decree_in_app !== null) {
      this.last_committed_decree_in_app = args.last_committed_decree_in_app;
    }
    if (args.last_committed_decree_in_prepare_list !== undefined && args.last_committed_decree_in_prepare_list !== null) {
      this.last_committed_decree_in_prepare_list = args.last_committed_decree_in_prepare_list;
    }
  }
};
prepare_ack.prototype = {};
prepare_ack.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.ballot = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_app = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_prepare_list = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

prepare_ack.prototype.write = function(output) {
  output.writeStructBegin('prepare_ack');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 2);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.ballot !== null && this.ballot !== undefined) {
    output.writeFieldBegin('ballot', Thrift.Type.I64, 3);
    output.writeI64(this.ballot);
    output.writeFieldEnd();
  }
  if (this.decree !== null && this.decree !== undefined) {
    output.writeFieldBegin('decree', Thrift.Type.I64, 4);
    output.writeI64(this.decree);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_app !== null && this.last_committed_decree_in_app !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_app', Thrift.Type.I64, 5);
    output.writeI64(this.last_committed_decree_in_app);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_prepare_list !== null && this.last_committed_decree_in_prepare_list !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_prepare_list', Thrift.Type.I64, 6);
    output.writeI64(this.last_committed_decree_in_prepare_list);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

learn_state = function(args) {
  this.from_decree_excluded = null;
  this.to_decree_included = null;
  this.meta = null;
  this.files = null;
  if (args) {
    if (args.from_decree_excluded !== undefined && args.from_decree_excluded !== null) {
      this.from_decree_excluded = args.from_decree_excluded;
    }
    if (args.to_decree_included !== undefined && args.to_decree_included !== null) {
      this.to_decree_included = args.to_decree_included;
    }
    if (args.meta !== undefined && args.meta !== null) {
      this.meta = new blob(args.meta);
    }
    if (args.files !== undefined && args.files !== null) {
      this.files = Thrift.copyList(args.files, [null]);
    }
  }
};
learn_state.prototype = {};
learn_state.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.from_decree_excluded = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.to_decree_included = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta = new blob();
        this.meta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

learn_state.prototype.write = function(output) {
  output.writeStructBegin('learn_state');
  if (this.from_decree_excluded !== null && this.from_decree_excluded !== undefined) {
    output.writeFieldBegin('from_decree_excluded', Thrift.Type.I64, 1);
    output.writeI64(this.from_decree_excluded);
    output.writeFieldEnd();
  }
  if (this.to_decree_included !== null && this.to_decree_included !== undefined) {
    output.writeFieldBegin('to_decree_included', Thrift.Type.I64, 2);
    output.writeI64(this.to_decree_included);
    output.writeFieldEnd();
  }
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.STRUCT, 3);
    this.meta.write(output);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.files.length);
    for (var iter15 in this.files)
    {
      if (this.files.hasOwnProperty(iter15))
      {
        iter15 = this.files[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

learn_request = function(args) {
  this.pid = null;
  this.learner = null;
  this.signature = null;
  this.last_committed_decree_in_app = null;
  this.last_committed_decree_in_prepare_list = null;
  this.app_specific_learn_request = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.learner !== undefined && args.learner !== null) {
      this.learner = new rpc_address(args.learner);
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.last_committed_decree_in_app !== undefined && args.last_committed_decree_in_app !== null) {
      this.last_committed_decree_in_app = args.last_committed_decree_in_app;
    }
    if (args.last_committed_decree_in_prepare_list !== undefined && args.last_committed_decree_in_prepare_list !== null) {
      this.last_committed_decree_in_prepare_list = args.last_committed_decree_in_prepare_list;
    }
    if (args.app_specific_learn_request !== undefined && args.app_specific_learn_request !== null) {
      this.app_specific_learn_request = new blob(args.app_specific_learn_request);
    }
  }
};
learn_request.prototype = {};
learn_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.learner = new rpc_address();
        this.learner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.signature = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_app = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_prepare_list = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.app_specific_learn_request = new blob();
        this.app_specific_learn_request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

learn_request.prototype.write = function(output) {
  output.writeStructBegin('learn_request');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.learner !== null && this.learner !== undefined) {
    output.writeFieldBegin('learner', Thrift.Type.STRUCT, 2);
    this.learner.write(output);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.I64, 3);
    output.writeI64(this.signature);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_app !== null && this.last_committed_decree_in_app !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_app', Thrift.Type.I64, 4);
    output.writeI64(this.last_committed_decree_in_app);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_prepare_list !== null && this.last_committed_decree_in_prepare_list !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_prepare_list', Thrift.Type.I64, 5);
    output.writeI64(this.last_committed_decree_in_prepare_list);
    output.writeFieldEnd();
  }
  if (this.app_specific_learn_request !== null && this.app_specific_learn_request !== undefined) {
    output.writeFieldBegin('app_specific_learn_request', Thrift.Type.STRUCT, 6);
    this.app_specific_learn_request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

learn_response = function(args) {
  this.err = null;
  this.config = null;
  this.last_committed_decree = null;
  this.prepare_start_decree = null;
  this.type = 0;
  this.state = null;
  this.address = null;
  this.base_local_dir = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new replica_configuration(args.config);
    }
    if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
      this.last_committed_decree = args.last_committed_decree;
    }
    if (args.prepare_start_decree !== undefined && args.prepare_start_decree !== null) {
      this.prepare_start_decree = args.prepare_start_decree;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = new learn_state(args.state);
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = new rpc_address(args.address);
    }
    if (args.base_local_dir !== undefined && args.base_local_dir !== null) {
      this.base_local_dir = args.base_local_dir;
    }
  }
};
learn_response.prototype = {};
learn_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new replica_configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.prepare_start_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.state = new learn_state();
        this.state.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.address = new rpc_address();
        this.address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.base_local_dir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

learn_response.prototype.write = function(output) {
  output.writeStructBegin('learn_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
    output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 3);
    output.writeI64(this.last_committed_decree);
    output.writeFieldEnd();
  }
  if (this.prepare_start_decree !== null && this.prepare_start_decree !== undefined) {
    output.writeFieldBegin('prepare_start_decree', Thrift.Type.I64, 4);
    output.writeI64(this.prepare_start_decree);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRUCT, 6);
    this.state.write(output);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRUCT, 7);
    this.address.write(output);
    output.writeFieldEnd();
  }
  if (this.base_local_dir !== null && this.base_local_dir !== undefined) {
    output.writeFieldBegin('base_local_dir', Thrift.Type.STRING, 8);
    output.writeString(this.base_local_dir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

group_check_request = function(args) {
  this.app = null;
  this.node = null;
  this.config = null;
  this.last_committed_decree = null;
  if (args) {
    if (args.app !== undefined && args.app !== null) {
      this.app = new app_info(args.app);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new replica_configuration(args.config);
    }
    if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
      this.last_committed_decree = args.last_committed_decree;
    }
  }
};
group_check_request.prototype = {};
group_check_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.app = new app_info();
        this.app.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new replica_configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

group_check_request.prototype.write = function(output) {
  output.writeStructBegin('group_check_request');
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRUCT, 1);
    this.app.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 3);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
    output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 4);
    output.writeI64(this.last_committed_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

group_check_response = function(args) {
  this.pid = null;
  this.err = null;
  this.last_committed_decree_in_app = null;
  this.last_committed_decree_in_prepare_list = null;
  this.learner_status_ = 0;
  this.learner_signature = null;
  this.node = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.last_committed_decree_in_app !== undefined && args.last_committed_decree_in_app !== null) {
      this.last_committed_decree_in_app = args.last_committed_decree_in_app;
    }
    if (args.last_committed_decree_in_prepare_list !== undefined && args.last_committed_decree_in_prepare_list !== null) {
      this.last_committed_decree_in_prepare_list = args.last_committed_decree_in_prepare_list;
    }
    if (args.learner_status_ !== undefined && args.learner_status_ !== null) {
      this.learner_status_ = args.learner_status_;
    }
    if (args.learner_signature !== undefined && args.learner_signature !== null) {
      this.learner_signature = args.learner_signature;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
  }
};
group_check_response.prototype = {};
group_check_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_app = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree_in_prepare_list = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.learner_status_ = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.learner_signature = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

group_check_response.prototype.write = function(output) {
  output.writeStructBegin('group_check_response');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 2);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_app !== null && this.last_committed_decree_in_app !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_app', Thrift.Type.I64, 3);
    output.writeI64(this.last_committed_decree_in_app);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree_in_prepare_list !== null && this.last_committed_decree_in_prepare_list !== undefined) {
    output.writeFieldBegin('last_committed_decree_in_prepare_list', Thrift.Type.I64, 4);
    output.writeI64(this.last_committed_decree_in_prepare_list);
    output.writeFieldEnd();
  }
  if (this.learner_status_ !== null && this.learner_status_ !== undefined) {
    output.writeFieldBegin('learner_status_', Thrift.Type.I32, 5);
    output.writeI32(this.learner_status_);
    output.writeFieldEnd();
  }
  if (this.learner_signature !== null && this.learner_signature !== undefined) {
    output.writeFieldBegin('learner_signature', Thrift.Type.I64, 6);
    output.writeI64(this.learner_signature);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 7);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

node_info = function(args) {
  this.status = 0;
  this.address = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = new rpc_address(args.address);
    }
  }
};
node_info.prototype = {};
node_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.address = new rpc_address();
        this.address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

node_info.prototype.write = function(output) {
  output.writeStructBegin('node_info');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRUCT, 2);
    this.address.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

meta_response_header = function(args) {
  this.err = null;
  this.primary_address = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.primary_address !== undefined && args.primary_address !== null) {
      this.primary_address = new rpc_address(args.primary_address);
    }
  }
};
meta_response_header.prototype = {};
meta_response_header.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.primary_address = new rpc_address();
        this.primary_address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

meta_response_header.prototype.write = function(output) {
  output.writeStructBegin('meta_response_header');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.primary_address !== null && this.primary_address !== undefined) {
    output.writeFieldBegin('primary_address', Thrift.Type.STRUCT, 2);
    this.primary_address.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_update_request = function(args) {
  this.info = null;
  this.config = null;
  this.type = 0;
  this.node = null;
  this.host_node = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new app_info(args.info);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new partition_configuration(args.config);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
    if (args.host_node !== undefined && args.host_node !== null) {
      this.host_node = new rpc_address(args.host_node);
    }
  }
};
configuration_update_request.prototype = {};
configuration_update_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new app_info();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new partition_configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.host_node = new rpc_address();
        this.host_node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_update_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_update_request');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 4);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.host_node !== null && this.host_node !== undefined) {
    output.writeFieldBegin('host_node', Thrift.Type.STRUCT, 5);
    this.host_node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_update_response = function(args) {
  this.err = null;
  this.config = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new partition_configuration(args.config);
    }
  }
};
configuration_update_response.prototype = {};
configuration_update_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new partition_configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_update_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_update_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_node_request = function(args) {
  this.node = null;
  if (args) {
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
  }
};
configuration_query_by_node_request.prototype = {};
configuration_query_by_node_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_node_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_node_request');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 1);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_node_response = function(args) {
  this.err = null;
  this.partitions = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [configuration_update_request]);
    }
  }
};
configuration_query_by_node_response.prototype = {};
configuration_query_by_node_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.partitions = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new configuration_update_request();
          elem22.read(input);
          this.partitions.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_node_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_node_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter23 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter23))
      {
        iter23 = this.partitions[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_index_request = function(args) {
  this.app_name = null;
  this.partition_indices = null;
  if (args) {
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.partition_indices !== undefined && args.partition_indices !== null) {
      this.partition_indices = args.partition_indices;
    }
  }
};
configuration_query_by_index_request.prototype = {};
configuration_query_by_index_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partition_indices = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_index_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_index_request');
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.partition_indices !== null && this.partition_indices !== undefined) {
    output.writeFieldBegin('partition_indices', Thrift.Type.I32, 2);
    output.writeI32(this.partition_indices);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_index_response = function(args) {
  this.err = null;
  this.partitions = null;
  this.app_id = null;
  this.paitition_count = null;
  this.is_stateful = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [configuration_update_request]);
    }
    if (args.app_id !== undefined && args.app_id !== null) {
      this.app_id = args.app_id;
    }
    if (args.paitition_count !== undefined && args.paitition_count !== null) {
      this.paitition_count = args.paitition_count;
    }
    if (args.is_stateful !== undefined && args.is_stateful !== null) {
      this.is_stateful = args.is_stateful;
    }
  }
};
configuration_query_by_index_response.prototype = {};
configuration_query_by_index_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.partitions = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new configuration_update_request();
          elem30.read(input);
          this.partitions.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.app_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.paitition_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_stateful = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_index_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_index_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter31 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter31))
      {
        iter31 = this.partitions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.app_id !== null && this.app_id !== undefined) {
    output.writeFieldBegin('app_id', Thrift.Type.I32, 3);
    output.writeI32(this.app_id);
    output.writeFieldEnd();
  }
  if (this.paitition_count !== null && this.paitition_count !== undefined) {
    output.writeFieldBegin('paitition_count', Thrift.Type.I32, 4);
    output.writeI32(this.paitition_count);
    output.writeFieldEnd();
  }
  if (this.is_stateful !== null && this.is_stateful !== undefined) {
    output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_stateful);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

create_app_options = function(args) {
  this.partition_count = null;
  this.replica_count = null;
  this.success_if_exist = null;
  this.app_type = null;
  this.is_stateful = null;
  this.envs = null;
  if (args) {
    if (args.partition_count !== undefined && args.partition_count !== null) {
      this.partition_count = args.partition_count;
    }
    if (args.replica_count !== undefined && args.replica_count !== null) {
      this.replica_count = args.replica_count;
    }
    if (args.success_if_exist !== undefined && args.success_if_exist !== null) {
      this.success_if_exist = args.success_if_exist;
    }
    if (args.app_type !== undefined && args.app_type !== null) {
      this.app_type = args.app_type;
    }
    if (args.is_stateful !== undefined && args.is_stateful !== null) {
      this.is_stateful = args.is_stateful;
    }
    if (args.envs !== undefined && args.envs !== null) {
      this.envs = Thrift.copyMap(args.envs, [null]);
    }
  }
};
create_app_options.prototype = {};
create_app_options.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partition_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.replica_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.success_if_exist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.app_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.is_stateful = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.envs = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          if (_i37 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key38 = null;
          var val39 = null;
          key38 = input.readString().value;
          val39 = input.readString().value;
          this.envs[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

create_app_options.prototype.write = function(output) {
  output.writeStructBegin('create_app_options');
  if (this.partition_count !== null && this.partition_count !== undefined) {
    output.writeFieldBegin('partition_count', Thrift.Type.I32, 1);
    output.writeI32(this.partition_count);
    output.writeFieldEnd();
  }
  if (this.replica_count !== null && this.replica_count !== undefined) {
    output.writeFieldBegin('replica_count', Thrift.Type.I32, 2);
    output.writeI32(this.replica_count);
    output.writeFieldEnd();
  }
  if (this.success_if_exist !== null && this.success_if_exist !== undefined) {
    output.writeFieldBegin('success_if_exist', Thrift.Type.BOOL, 3);
    output.writeBool(this.success_if_exist);
    output.writeFieldEnd();
  }
  if (this.app_type !== null && this.app_type !== undefined) {
    output.writeFieldBegin('app_type', Thrift.Type.STRING, 4);
    output.writeString(this.app_type);
    output.writeFieldEnd();
  }
  if (this.is_stateful !== null && this.is_stateful !== undefined) {
    output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 5);
    output.writeBool(this.is_stateful);
    output.writeFieldEnd();
  }
  if (this.envs !== null && this.envs !== undefined) {
    output.writeFieldBegin('envs', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envs));
    for (var kiter40 in this.envs)
    {
      if (this.envs.hasOwnProperty(kiter40))
      {
        var viter41 = this.envs[kiter40];
        output.writeString(kiter40);
        output.writeString(viter41);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_create_app_request = function(args) {
  this.app_name = null;
  this.options = null;
  if (args) {
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new create_app_options(args.options);
    }
  }
};
configuration_create_app_request.prototype = {};
configuration_create_app_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new create_app_options();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_create_app_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_create_app_request');
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

drop_app_options = function(args) {
  this.success_if_not_exist = null;
  if (args) {
    if (args.success_if_not_exist !== undefined && args.success_if_not_exist !== null) {
      this.success_if_not_exist = args.success_if_not_exist;
    }
  }
};
drop_app_options.prototype = {};
drop_app_options.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success_if_not_exist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

drop_app_options.prototype.write = function(output) {
  output.writeStructBegin('drop_app_options');
  if (this.success_if_not_exist !== null && this.success_if_not_exist !== undefined) {
    output.writeFieldBegin('success_if_not_exist', Thrift.Type.BOOL, 1);
    output.writeBool(this.success_if_not_exist);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_drop_app_request = function(args) {
  this.app_name = null;
  this.options = null;
  if (args) {
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new drop_app_options(args.options);
    }
  }
};
configuration_drop_app_request.prototype = {};
configuration_drop_app_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new drop_app_options();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_drop_app_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_drop_app_request');
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_list_apps_request = function(args) {
  this.status = 0;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
configuration_list_apps_request.prototype = {};
configuration_list_apps_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_list_apps_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_list_apps_request');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_list_nodes_request = function(args) {
  this.status = 0;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
configuration_list_nodes_request.prototype = {};
configuration_list_nodes_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_list_nodes_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_list_nodes_request');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_create_app_response = function(args) {
  this.err = null;
  this.appid = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.appid !== undefined && args.appid !== null) {
      this.appid = args.appid;
    }
  }
};
configuration_create_app_response.prototype = {};
configuration_create_app_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_create_app_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_create_app_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.appid !== null && this.appid !== undefined) {
    output.writeFieldBegin('appid', Thrift.Type.I32, 2);
    output.writeI32(this.appid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

control_balancer_migration_request = function(args) {
  this.enable_migration = null;
  if (args) {
    if (args.enable_migration !== undefined && args.enable_migration !== null) {
      this.enable_migration = args.enable_migration;
    }
  }
};
control_balancer_migration_request.prototype = {};
control_balancer_migration_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable_migration = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

control_balancer_migration_request.prototype.write = function(output) {
  output.writeStructBegin('control_balancer_migration_request');
  if (this.enable_migration !== null && this.enable_migration !== undefined) {
    output.writeFieldBegin('enable_migration', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable_migration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

control_balancer_migration_response = function(args) {
  this.err = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
  }
};
control_balancer_migration_response.prototype = {};
control_balancer_migration_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

control_balancer_migration_response.prototype.write = function(output) {
  output.writeStructBegin('control_balancer_migration_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

balancer_proposal_request = function(args) {
  this.pid = null;
  this.type = null;
  this.from_addr = null;
  this.to_addr = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.from_addr !== undefined && args.from_addr !== null) {
      this.from_addr = new rpc_address(args.from_addr);
    }
    if (args.to_addr !== undefined && args.to_addr !== null) {
      this.to_addr = new rpc_address(args.to_addr);
    }
  }
};
balancer_proposal_request.prototype = {};
balancer_proposal_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.from_addr = new rpc_address();
        this.from_addr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.to_addr = new rpc_address();
        this.to_addr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

balancer_proposal_request.prototype.write = function(output) {
  output.writeStructBegin('balancer_proposal_request');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.from_addr !== null && this.from_addr !== undefined) {
    output.writeFieldBegin('from_addr', Thrift.Type.STRUCT, 3);
    this.from_addr.write(output);
    output.writeFieldEnd();
  }
  if (this.to_addr !== null && this.to_addr !== undefined) {
    output.writeFieldBegin('to_addr', Thrift.Type.STRUCT, 4);
    this.to_addr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

balancer_proposal_response = function(args) {
  this.err = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
  }
};
balancer_proposal_response.prototype = {};
balancer_proposal_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

balancer_proposal_response.prototype.write = function(output) {
  output.writeStructBegin('balancer_proposal_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_drop_app_response = function(args) {
  this.err = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
  }
};
configuration_drop_app_response.prototype = {};
configuration_drop_app_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_drop_app_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_drop_app_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_list_apps_response = function(args) {
  this.err = null;
  this.infos = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.infos !== undefined && args.infos !== null) {
      this.infos = Thrift.copyList(args.infos, [app_info]);
    }
  }
};
configuration_list_apps_response.prototype = {};
configuration_list_apps_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.infos = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new app_info();
          elem48.read(input);
          this.infos.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_list_apps_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_list_apps_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.infos !== null && this.infos !== undefined) {
    output.writeFieldBegin('infos', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.infos.length);
    for (var iter49 in this.infos)
    {
      if (this.infos.hasOwnProperty(iter49))
      {
        iter49 = this.infos[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_list_nodes_response = function(args) {
  this.err = null;
  this.infos = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.infos !== undefined && args.infos !== null) {
      this.infos = Thrift.copyList(args.infos, [node_info]);
    }
  }
};
configuration_list_nodes_response.prototype = {};
configuration_list_nodes_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.infos = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = new node_info();
          elem56.read(input);
          this.infos.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_list_nodes_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_list_nodes_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.infos !== null && this.infos !== undefined) {
    output.writeFieldBegin('infos', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.infos.length);
    for (var iter57 in this.infos)
    {
      if (this.infos.hasOwnProperty(iter57))
      {
        iter57 = this.infos[iter57];
        iter57.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

query_replica_decree_request = function(args) {
  this.pid = null;
  this.node = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
  }
};
query_replica_decree_request.prototype = {};
query_replica_decree_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

query_replica_decree_request.prototype.write = function(output) {
  output.writeStructBegin('query_replica_decree_request');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

query_replica_decree_response = function(args) {
  this.err = null;
  this.last_decree = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.last_decree !== undefined && args.last_decree !== null) {
      this.last_decree = args.last_decree;
    }
  }
};
query_replica_decree_response.prototype = {};
query_replica_decree_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.last_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

query_replica_decree_response.prototype.write = function(output) {
  output.writeStructBegin('query_replica_decree_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.last_decree !== null && this.last_decree !== undefined) {
    output.writeFieldBegin('last_decree', Thrift.Type.I64, 2);
    output.writeI64(this.last_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

replica_info = function(args) {
  this.pid = null;
  this.ballot = null;
  this.status = null;
  this.last_committed_decree = null;
  this.last_prepared_decree = null;
  this.last_durable_decree = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.ballot !== undefined && args.ballot !== null) {
      this.ballot = args.ballot;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
      this.last_committed_decree = args.last_committed_decree;
    }
    if (args.last_prepared_decree !== undefined && args.last_prepared_decree !== null) {
      this.last_prepared_decree = args.last_prepared_decree;
    }
    if (args.last_durable_decree !== undefined && args.last_durable_decree !== null) {
      this.last_durable_decree = args.last_durable_decree;
    }
  }
};
replica_info.prototype = {};
replica_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ballot = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.last_prepared_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.last_durable_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

replica_info.prototype.write = function(output) {
  output.writeStructBegin('replica_info');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.ballot !== null && this.ballot !== undefined) {
    output.writeFieldBegin('ballot', Thrift.Type.I64, 2);
    output.writeI64(this.ballot);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
    output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 4);
    output.writeI64(this.last_committed_decree);
    output.writeFieldEnd();
  }
  if (this.last_prepared_decree !== null && this.last_prepared_decree !== undefined) {
    output.writeFieldBegin('last_prepared_decree', Thrift.Type.I64, 5);
    output.writeI64(this.last_prepared_decree);
    output.writeFieldEnd();
  }
  if (this.last_durable_decree !== null && this.last_durable_decree !== undefined) {
    output.writeFieldBegin('last_durable_decree', Thrift.Type.I64, 6);
    output.writeI64(this.last_durable_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

query_replica_info_request = function(args) {
  this.node = null;
  if (args) {
    if (args.node !== undefined && args.node !== null) {
      this.node = new rpc_address(args.node);
    }
  }
};
query_replica_info_request.prototype = {};
query_replica_info_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new rpc_address();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

query_replica_info_request.prototype.write = function(output) {
  output.writeStructBegin('query_replica_info_request');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 1);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

query_replica_info_response = function(args) {
  this.err = null;
  this.replicas = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.replicas !== undefined && args.replicas !== null) {
      this.replicas = Thrift.copyList(args.replicas, [replica_info]);
    }
  }
};
query_replica_info_response.prototype = {};
query_replica_info_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.replicas = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new replica_info();
          elem64.read(input);
          this.replicas.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

query_replica_info_response.prototype.write = function(output) {
  output.writeStructBegin('query_replica_info_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.replicas !== null && this.replicas !== undefined) {
    output.writeFieldBegin('replicas', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.replicas.length);
    for (var iter65 in this.replicas)
    {
      if (this.replicas.hasOwnProperty(iter65))
      {
        iter65 = this.replicas[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

app_state = function(args) {
  this.info = null;
  this.available_partitions = null;
  this.partitions = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new app_info(args.info);
    }
    if (args.available_partitions !== undefined && args.available_partitions !== null) {
      this.available_partitions = new atom_int(args.available_partitions);
    }
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [partition_configuration]);
    }
  }
};
app_state.prototype = {};
app_state.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new app_info();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.available_partitions = new atom_int();
        this.available_partitions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.partitions = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new partition_configuration();
          elem72.read(input);
          this.partitions.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

app_state.prototype.write = function(output) {
  output.writeStructBegin('app_state');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.available_partitions !== null && this.available_partitions !== undefined) {
    output.writeFieldBegin('available_partitions', Thrift.Type.STRUCT, 2);
    this.available_partitions.write(output);
    output.writeFieldEnd();
  }
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter73 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter73))
      {
        iter73 = this.partitions[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

node_state = function(args) {
  this.is_alive = null;
  this.address = null;
  this.primaries = null;
  this.partitions = null;
  if (args) {
    if (args.is_alive !== undefined && args.is_alive !== null) {
      this.is_alive = args.is_alive;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = new rpc_address(args.address);
    }
    if (args.primaries !== undefined && args.primaries !== null) {
      this.primaries = Thrift.copyList(args.primaries, [gpid]);
    }
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [gpid]);
    }
  }
};
node_state.prototype = {};
node_state.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_alive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.address = new rpc_address();
        this.address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size74 = 0;
        var _rtmp378;
        this.primaries = [];
        var _etype77 = 0;
        _rtmp378 = input.readSetBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new gpid();
          elem80.read(input);
          this.primaries.push(elem80);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size81 = 0;
        var _rtmp385;
        this.partitions = [];
        var _etype84 = 0;
        _rtmp385 = input.readSetBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = new gpid();
          elem87.read(input);
          this.partitions.push(elem87);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

node_state.prototype.write = function(output) {
  output.writeStructBegin('node_state');
  if (this.is_alive !== null && this.is_alive !== undefined) {
    output.writeFieldBegin('is_alive', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_alive);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRUCT, 2);
    this.address.write(output);
    output.writeFieldEnd();
  }
  if (this.primaries !== null && this.primaries !== undefined) {
    output.writeFieldBegin('primaries', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRUCT, this.primaries.length);
    for (var iter88 in this.primaries)
    {
      if (this.primaries.hasOwnProperty(iter88))
      {
        iter88 = this.primaries[iter88];
        iter88.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter89 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter89))
      {
        iter89 = this.partitions[iter89];
        iter89.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

